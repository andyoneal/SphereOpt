#include "UnityCG.cginc"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define HALF_DEG2RAD 0.00872664626
#define LOD0_RANGE 40000 //original 40k
#define LOD1_RANGE 60000 //original 60k
#define MAX_EXTENT 500 //technically 5.507 * 100 on the node model, but close enough?
//might be worth it to have separate values for frame since that would only have to be 100.

#pragma enable_d3d11_debug_symbols

struct Segment {
    uint layer;
    uint state;
    float3 pos0;
    float3 pos1;
    float progress0;
    float progress1;
    int color;
};

float3 _CamPosition;
float4 _LayerRotations[11 * 3];
float4x4 _UNITY_MATRIX_VP;
float _FOV;
float _Scale;
int _Global_DS_RenderPlace;
int _Global_DS_GameMaskL;

StructuredBuffer<Segment> _InstBuffer;
AppendStructuredBuffer<uint> _LOD0_ID_Buffer;
AppendStructuredBuffer<uint> _LOD1_ID_Buffer;
AppendStructuredBuffer<uint> _LOD2_ID_Buffer;

inline bool IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.x >= -clipPos.w
         && clipPos.y >= -clipPos.w
         && clipPos.x <=  clipPos.w
         && clipPos.y <=  clipPos.w)
         ? 1 : 0;
}

inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return ((distance(pos, maxPos) > boundsSize)
            + (distance(pos, minPos) > boundsSize));
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID
    )
{
    uint tID = _dispatchThreadID.x;
    uint layer = _InstBuffer[tID].layer;
    float4x4 objectToWorld;
    objectToWorld._m00_m01_m02_m03 = _LayerRotations[layer * 3];
    objectToWorld._m10_m11_m12_m13 = _LayerRotations[layer * 3 + 1];
    objectToWorld._m20_m21_m22_m23 = _LayerRotations[layer * 3 + 2];
    objectToWorld._m30_m31_m32_m33 = float4(0,0,0,1);
    float3 pos0 = mul(objectToWorld, float4(_InstBuffer[tID].pos0,1));
    float3 pos1 = mul(objectToWorld, float4(_InstBuffer[tID].pos1,1));

    float minDistanceToCamera = min(distance(pos0.xyz, _CamPosition.xyz), distance(pos1.xyz, _CamPosition.xyz));

    //float4 clipPos0 = mul(_UNITY_MATRIX_VP, float4(pos0, 1));
    //float4 clipPos1 = mul(_UNITY_MATRIX_VP, float4(pos1, 1));

    //float isInFrustum = IsVisibleAfterFrustumCulling(clipPos0) + IsVisibleAfterFrustumCulling(clipPos1);
    
    float maxExtent = MAX_EXTENT * _Scale;

    float3 minPos0 = pos0 - maxExtent;
    float3 maxPos0 = pos0 + maxExtent;

    float3 minPos1 = pos1 - maxExtent;
    float3 maxPos1 = pos1 + maxExtent;
    
    float4 boxCorners0[8];
    boxCorners0[0] = float4(minPos0.x, minPos0.y, minPos0.z, 1.0);
    boxCorners0[1] = float4(minPos0.x, minPos0.y, maxPos0.z, 1.0);
    boxCorners0[2] = float4(minPos0.x, maxPos0.y, minPos0.z, 1.0);
    boxCorners0[3] = float4(minPos0.x, maxPos0.y, maxPos0.z, 1.0);
    boxCorners0[4] = float4(maxPos0.x, minPos0.y, minPos0.z, 1.0);
    boxCorners0[5] = float4(maxPos0.x, minPos0.y, maxPos0.z, 1.0);
    boxCorners0[6] = float4(maxPos0.x, maxPos0.y, minPos0.z, 1.0);
    boxCorners0[7] = float4(maxPos0.x, maxPos0.y, maxPos0.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_VP, boxCorners0[0]);
    bool isInFrustum = IsVisibleAfterFrustumCulling(clipPos);

    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_VP, boxCorners0[i]);
        isInFrustum = isInFrustum || IsVisibleAfterFrustumCulling(clipPos);
    }

    float4 boxCorners1[8];
    boxCorners1[0] = float4(minPos1.x, minPos1.y, minPos1.z, 1.0);
    boxCorners1[1] = float4(minPos1.x, minPos1.y, maxPos1.z, 1.0);
    boxCorners1[2] = float4(minPos1.x, maxPos1.y, minPos1.z, 1.0);
    boxCorners1[3] = float4(minPos1.x, maxPos1.y, maxPos1.z, 1.0);
    boxCorners1[4] = float4(maxPos1.x, minPos1.y, minPos1.z, 1.0);
    boxCorners1[5] = float4(maxPos1.x, minPos1.y, maxPos1.z, 1.0);
    boxCorners1[6] = float4(maxPos1.x, maxPos1.y, minPos1.z, 1.0);
    boxCorners1[7] = float4(maxPos1.x, maxPos1.y, maxPos1.z, 1.0);

    [unroll]
    for (int j = 0; j < 8; j++)
    {
        clipPos = mul(_UNITY_MATRIX_VP, boxCorners1[j]);
        isInFrustum = isInFrustum || IsVisibleAfterFrustumCulling(clipPos);
    }

    float scale = _Scale * rcp(tan((_FOV+30) * HALF_DEG2RAD));

    /*
    float3 minPos = min(minPos0, minPos1);
    float3 maxPos = max(maxPos0, maxPos1);
    
    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_VP, pos0);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);
    clipPos = mul(_UNITY_MATRIX_VP, pos1);
    isInFrustum = isInFrustum + IsVisibleAfterFrustumCulling(clipPos);

    [unroll]
    for (int i = 0; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_VP, boxCorners[i]);
        isInFrustum = isInFrustum + IsVisibleAfterFrustumCulling(clipPos);
    }

    */
    
    float renderPlace = asuint(_Global_DS_RenderPlace);
    float progress = _InstBuffer[tID].progress0 + _InstBuffer[tID].progress1;
    bool noProgress = renderPlace < 1.5 && progress < 0.01;
    
    int layerMask = 1 << layer;
    bool showLayerInGame = renderPlace > 1.5 || (layerMask & asint(_Global_DS_GameMaskL)) > 0;

    //if (layer > 0 && (!IsCameraOutsideObjBounds(_CamPosition, minPos, maxPos) || isInFrustum > 0))
    if (layer > 0 && isInFrustum && !noProgress && showLayerInGame)
    {
        if (minDistanceToCamera > LOD1_RANGE * scale) {
            _LOD2_ID_Buffer.Append(tID);
        }
        else if (minDistanceToCamera > LOD0_RANGE * scale) {
            _LOD1_ID_Buffer.Append(tID);
        }
        else {
            _LOD0_ID_Buffer.Append(tID);
        }
    }
}